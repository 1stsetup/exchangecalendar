<?xml version="1.0" encoding="UTF-8"?>

<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: GPL 3.0
 *
 * The contents of this file are subject to the General Public License
 * 3.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *  Exchange 2007/2010 Contacts.
 *  For Thunderbird.
 *
 * Author: Deepak Kumar
 * email: deepk2u@gmail.com
 *
 *
 * ***** BEGIN LICENSE BLOCK *****/
-->

<!DOCTYPE dialog [
  <!ENTITY % dtd1 SYSTEM "chrome://calendar/locale/global.dtd" > %dtd1;
  <!ENTITY % dtd2 SYSTEM "chrome://calendar/locale/calendar.dtd" > %dtd2;
  <!ENTITY % dtd3 SYSTEM "chrome://calendar/locale/calendar-event-dialog.dtd"> %dtd3;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="exchWebServiceEditor">

    <content>

	<xul:vbox flex="1">
		<xul:toolbox anonid="FormatToolbox" mode="icons">
			<xul:toolbar class="chromeclass-toolbar" anonid="FormatToolbar">
				<xul:toolbarbutton anonid="cmd_bold"
					class="bold-button"
					tooltiptext="Bold"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_all"/>
				<xul:toolbarbutton anonid="cmd_italic"
					class="italic-button"
					tooltiptext="Italic"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_all"/>
				<xul:toolbarbutton anonid="cmd_underline"
					class="underline-button"
					tooltiptext="Underline"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_all"/>
				<xul:toolbarseparator class="toolbarseparator-standard"/>
				<xul:toolbarbutton anonid="cmd_decreaseFont"
					class="decreaseFont-button"
					tooltiptext="Indent"
					type="checkbox"
					autoCheck="false"
					connect="true"/>
				<xul:toolbarbutton anonid="cmd_increaseFont"
					class="increaseFont-button"
					tooltiptext="Outdent"
					type="checkbox"
					autoCheck="false"
					connect="true"/>
				<xul:toolbarseparator class="toolbarseparator-standard"/>
				<xul:toolbarbutton anonid="cmd_indent"
					class="indent-button"
					tooltiptext="Indent"
					type="checkbox"
					autoCheck="false"
					connect="true"/>
				<xul:toolbarbutton anonid="cmd_outdent"
					class="outdent-button"
					tooltiptext="Outdent"
					type="checkbox"
					autoCheck="false"
					connect="true"/>
				<xul:toolbarseparator class="toolbarseparator-standard"/>
				<xul:toolbarbutton anonid="cmd_ol"
					class="orderedlist-button"
					tooltiptext="Indent"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_all"/>
				<xul:toolbarbutton anonid="cmd_ul"
					class="unorderedlist-button"
					tooltiptext="Outdent"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_all"/>
				<xul:toolbarseparator class="toolbarseparator-standard"/>
				<xul:toolbaritem class="formatting-button">
					<xul:stack align="enter" state="rgb(102,102,102)">
						<xul:box style="background-color:#FFFFFF"
							anonid="cmd_backgroundColor"
							class="color-button"
							tooltiptext="Choose higlight color for text"
							id="BackgroundColorButton"
						/>
						<xul:box style="background-color:rgb(0,0,0)"
							anonid="cmd_fontColor"
							class="color-button"
							tooltiptext="Choose font color for text"
							id="TextColorButton"
						/>
					</xul:stack>
				</xul:toolbaritem>
				<xul:toolbarseparator class="toolbarseparator-standard"/>
				<xul:toolbarbutton anonid="cmd_align_left"
					class="align-left-button"
					tooltiptext="Align left"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_attribute"/>
				<xul:toolbarbutton anonid="cmd_align_center"
					class="align-center-button"
					tooltiptext="Align center"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_attribute"/>
				<xul:toolbarbutton anonid="cmd_align_right"
					class="align-right-button"
					tooltiptext="Align right"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_attribute"/>
				<xul:toolbarbutton anonid="cmd_align_justify"
					class="align-justify-button"
					tooltiptext="Align justify"
					type="checkbox"
					autoCheck="false"
					connect="true"
					state="state_attribute"/>
			</xul:toolbar>
		</xul:toolbox>
		<xul:toolbox anonid="FormatToolbox" mode="icons">
			<xul:toolbar class="chromeclass-toolbar" anonid="FormatToolbar">
				<xul:toolbaritem class="formatting-button">
					<xul:menulist anonid="fontFaceMenuList" class="toolbar-focustarget" crop="right">
						<xul:menupopup anonid="fontFaceSelect"/>
					</xul:menulist>
				</xul:toolbaritem>
			</xul:toolbar>
		</xul:toolbox>
		<xul:editor
			type="content-primary"
			anonid="editor"
			class="exchWebService-editor"
			src="about:blank"
			editortype="htmlmail"
			flex="1"/>
	</xul:vbox>

    </content>
	<implementation>
		<constructor><![CDATA[
			this.editorElement = document.getAnonymousElementByAttribute(this, "anonid", "editor");
			var self=this;
			if (this.editorElement) {
				this.commandManager = this.editorElement.commandManager;
				this.editorClickFunction = function() { self.onClickEditor();};
				this.editorElement.addEventListener("click", this.editorClickFunction, true);

				this.editorKeyPressFunction = function(aEvent) { self.onKeyPressEditor(aEvent);};
				this.editorElement.addEventListener("keyup", this.editorKeyPressFunction, true);

			}

			this.atomService = Components.classes["@mozilla.org/atom-service;1"].getService(Components.interfaces.nsIAtomService);

			this.connectButtons("FormatToolbar");
			// Connect color button
			this.bgColorFunction = function(){ self.selectColor("cmd_backgroundColor");};
			var bgColorElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_backgroundColor")
			bgColorElement.addEventListener("click", this.bgColorFunction, true);

			this.fontColorFunction = function(){ self.selectColor("cmd_fontColor");};
			var fontColorElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_fontColor")
			fontColorElement.addEventListener("click", this.fontColorFunction, true);

			this.highlightColor = "#FFFFFF";
			this.fontColor = "#000000";

			// Fill fontfac popup menu
			this.menuPopupFunction = function(event){ self.selectFont("cmd_fontFace", event.target.value);};
			this.menuPopup = document.getAnonymousElementByAttribute(this, "anonid", "fontFaceSelect");
			this.menuPopup.addEventListener("command", this.menuPopupFunction, true);
			this.fillFontFace();
		]]></constructor>

		<destructor><![CDATA[
			if (this.editorElement) {
				this.editorElement.removeEventListener("click", this.editorClickFunction, false);
				this.editorElement.removeEventListener("keyup", this.editorKeyPressFunction, false);
			}
			this.disconnectButtons("FormatToolbar");
			document.getAnonymousElementByAttribute(this, "anonid", "cmd_backgroundColor").removeEventListener("click", this.bgColorFunction, false);
			document.getAnonymousElementByAttribute(this, "anonid", "cmd_fontColor").removeEventListener("click", this.fontColorFunction, false);
			this.menuPopup.removeEventListener("command", this.menuPopupFunction, false);
		]]></destructor>
			
			<property name="content">
				<getter>
				  <![CDATA[
				    return this.editorElement.contentDocument.documentElement.innerHTML;
				  ]]>
				</getter>
				<setter>
				  <![CDATA[
					if (this.editorElement) {
						this.editorElement.contentDocument.documentElement.innerHTML = val;
					}
				  ]]>
				</setter>
			</property>

		<method name="fillFontFace">
			<body><![CDATA[
			if (gExchWebServiceLocalFonts == undefined) {
				// Build list of all local fonts once per editor
				try {
					var enumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
								 .getService(Components.interfaces.nsIFontEnumerator);
					var localFontCount = { value: 0 }
					var gExchWebServiceLocalFonts = enumerator.EnumerateAllFonts(localFontCount);
				}
				catch(e) { }
			}

			if (gExchWebServiceLocalFonts != undefined) {

				var itemNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
				itemNode.setAttribute("label", "Variable width");
				itemNode.setAttribute("value", "Arial");
				this.menuPopup.appendChild(itemNode);

				var itemNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuseparator");
				this.menuPopup.appendChild(itemNode);

				for (var i = 0; i < gExchWebServiceLocalFonts.length; ++i) {
					if (gExchWebServiceLocalFonts[i] != "") {
						var itemNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
						itemNode.setAttribute("label", gExchWebServiceLocalFonts[i]);
						itemNode.setAttribute("value", gExchWebServiceLocalFonts[i]);
						itemNode.setAttribute("style", "font-family: "+gExchWebServiceLocalFonts[i]+" !important;");
						this.menuPopup.appendChild(itemNode);
					}
				}
			}
		]]></body>
		</method>

		<method name="connectButtons">
			<parameter name="aAnonId" />
			<body><![CDATA[
			var toolbar = document.getAnonymousElementByAttribute(this, "anonid", aAnonId);

			if (!this.functions) {
				this.functions = {};
			}

			if (toolbar) {
				var toolbarButtons = toolbar.getElementsByTagName("xul:toolbarbutton");
				for (var i=0; i<toolbarButtons.length;i++) {
					if ((toolbarButtons[i].hasAttribute("connect")) && (toolbarButtons[i].getAttribute("connect") == "true")) {
						this.connectButton(toolbarButtons[i].getAttribute("anonid"), aAnonId);
					}
				}
			}
		]]></body>
		</method>

		<method name="connectButton">
			<parameter name="aAnonId" />
			<parameter name="aStore" />
			<body><![CDATA[
			var self = this;

			if (!this.functions[aStore]) {
				this.functions[aStore] = {};
			}
			this.functions[aStore][aAnonId] = function() { self.toggleButton(aAnonId);};
			document.getAnonymousElementByAttribute(this, "anonid", aAnonId).addEventListener("command", this.functions[aStore][aAnonId], true);
		]]></body>
		</method>

		<method name="disconnectButtons">
			<parameter name="aAnonId" />
			<body><![CDATA[
			if (this.functions[aAnonId]) {
				for (var name in this.functions[aAnonId]) {
					this.disconnectButton(name, aAnonId);
				}
			}
		]]></body>
		</method>

		<method name="disconnectButton">
			<parameter name="aAnonId" />
			<parameter name="aStore" />
			<body><![CDATA[
			document.getAnonymousElementByAttribute(this, "anonid", aAnonId).removeEventListener("command", this.functions[aStore][aAnonId], false);
		]]></body>
		</method>

		<method name="selectFont">
			<parameter name="aCmd" />
			<parameter name="aFontName" />
			<body><![CDATA[
			var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
					.createInstance(Components.interfaces.nsICommandParams);
			state.setCStringValue("state_attribute", aFontName);
			this.commandManager.doCommand(aCmd, state, null);
			document.getAnonymousElementByAttribute(this, "anonid", "fontFaceMenuList").setAttribute("style", "font-family: "+aFontName+";");
		]]></body>
		</method>

		<method name="onKeyPressEditor">
			<parameter name="aEvent" />
			<body><![CDATA[
			if ( ( (aEvent.keyCode > 36) && (aEvent.keyCode < 41) ) || (aEvent.keyCode == 33) || (aEvent.keyCode == 34)) {
				this.onClickEditor();
			}
		]]></body>
		</method>

		<method name="onClickEditor">
			<body><![CDATA[
			for (var aStore in this.functions) {
				for (var aAnonId in this.functions[aStore]) {
					this.setButtonState(aAnonId);
				}
			}

			var color = this.getCStringCommandState("cmd_fontColor", this.commandManager, this.editorElement.contentWindow, "state_attribute");
			if (color == "") {
				color = "transparent";
			}
			else {
				color = this.ConvertRGBColorIntoHEXColor(color);
			}
			document.getAnonymousElementByAttribute(this, "anonid", "cmd_fontColor").setAttribute("style","background-color:"+color);
			
			var aFirst = { value: false };
			var aAny = { value: false };
			var aAll = { value: false };
			var propAtom = this.atomService.getAtom("font");
			var edElement = this.editorElement.getHTMLEditor(this.editorElement.contentWindow);
			color = edElement.getInlinePropertyWithAttrValue(propAtom, "bgcolor", null, aFirst, aAny, aAll);			

			document.getAnonymousElementByAttribute(this, "anonid", "cmd_backgroundColor").setAttribute("style","background-color:"+color);
			
			var font = this.getCStringCommandState("cmd_fontFace", this.commandManager, this.editorElement.contentWindow, "state_attribute");
			font = font.replace(/"/g, "");
			var fontElement;
			if (font.indexOf(",") > -1) {
				var fonts = font.split(",");
				for(var i = 0; ((i<fonts.length) && (!fontElement)); i++) {
					fontElement = document.getAnonymousElementByAttribute(this, "label", fonts[i]);
					font = fonts[i];
				}
			}
			else {
				fontElement = document.getAnonymousElementByAttribute(this, "label", font);
			}
			if (fontElement) {
				document.getAnonymousElementByAttribute(this, "anonid", "fontFaceMenuList").selectedItem = fontElement;
				document.getAnonymousElementByAttribute(this, "anonid", "fontFaceMenuList").setAttribute("style", "font-family: "+font+";");
			}
			else {
			}
		
		]]></body>
		</method>

		
		<method name="selectColor">
			<parameter name="aAnonId" />
			<body><![CDATA[
			var element = document.getAnonymousElementByAttribute(this, "anonid", aAnonId);

			// Get current color
			var color = this.getCStringCommandState(aAnonId, this.commandManager, this.editorElement.contentWindow, "state_attribute");
			if (color == "") {
				color = "transparent";
			}
			else {
				color = this.ConvertRGBColorIntoHEXColor(color);
			}
			var colorObj = {};
			colorObj.Type = "Text";
			colorObj.TextColor = color;
			window.openDialog("chrome://editor/content/EdColorPicker.xul", "_blank", "chrome,close,titlebar,modal", "", colorObj);

			if (colorObj.Cancel) {
				return;
			}

			element.setAttribute("style","background-color:"+colorObj.TextColor);

			if (aAnonId == "cmd_fontColor") {
				var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
						.createInstance(Components.interfaces.nsICommandParams);
				state.setCStringValue("state_attribute", colorObj.TextColor);
				this.commandManager.doCommand(aAnonId, state, null);
			}
			else {
				var propAtom = this.atomService.getAtom("font");
				var edElement = this.editorElement.getHTMLEditor(this.editorElement.contentWindow);
				edElement.setInlineProperty(propAtom, "bgcolor", colorObj.TextColor);			
			}

		]]></body>
		</method>

		<method name="ConvertRGBColorIntoHEXColor">
			<parameter name="color" />
			<body><![CDATA[
			  if ( /rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.test(color) ) {
			    var r = Number(RegExp.$1).toString(16);
			    if (r.length == 1) r = "0"+r;
			    var g = Number(RegExp.$2).toString(16);
			    if (g.length == 1) g = "0"+g;
			    var b = Number(RegExp.$3).toString(16);
			    if (b.length == 1) b = "0"+b;
			    return "#"+r+g+b;
			  }
			  else
			  {
			    return color;
			  }
		]]></body>
		</method>

		<method name="getCStringCommandState">
			<parameter name="aCommandName" />
			<parameter name="aCommandManager" />
			<parameter name="aWindow" />
			<parameter name="aState" />
			<body><![CDATA[
			var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
					.createInstance(Components.interfaces.nsICommandParams);
			aCommandManager.getCommandState(aCommandName, aWindow,state);

			return state.getCStringValue(aState);
		]]></body>
		</method>

		<method name="getBoolCommandState">
			<parameter name="aCommandName" />
			<parameter name="aCommandManager" />
			<parameter name="aWindow" />
			<parameter name="aState" />
			<body><![CDATA[
			var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
					.createInstance(Components.interfaces.nsICommandParams);
			aCommandManager.getCommandState(aCommandName, aWindow,state);

			return state.getBooleanValue(aState);
		]]></body>
		</method>

		<method name="setButtonState">
			<parameter name="aAnonId" />
			<body><![CDATA[
			if (this.commandManager) {
				var button = document.getAnonymousElementByAttribute(this, "anonid", aAnonId);
				if (button.hasAttribute("state")) {
					if (aAnonId.indexOf("cmd_align") > -1) {
						button.checked = (aAnonId.indexOf(this.getCStringCommandState("cmd_align", this.commandManager, this.editorElement.contentWindow, "state_attribute")) > 0);
					}
					else {
						button.checked = this.getBoolCommandState(aAnonId, this.commandManager, this.editorElement.contentWindow, button.getAttribute("state"));
					}
				}
			}
		]]></body>
		</method>
		<method name="toggleButton">
			<parameter name="aAnonId" />
			<body><![CDATA[
			if (this.commandManager) {
				if (aAnonId.indexOf("cmd_align") > -1) {
					var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
							.createInstance(Components.interfaces.nsICommandParams);
					state.setCStringValue("state_attribute", aAnonId.substr(10));
					this.commandManager.doCommand("cmd_align", state, null);
				}
				else {
					this.commandManager.doCommand(aAnonId, null, null);
				}
//				this.setButtonState(aAnonId);
				this.onClickEditor();
			}
		]]></body>
		</method>

	</implementation>
	</binding>
</bindings>
